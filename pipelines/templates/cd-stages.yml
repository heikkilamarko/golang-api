parameters:
  - name: name
    type: string
  - name: variable_group
    type: string
  - name: environment
    type: string

stages:
  # STAGE: Plan infra
  - stage: plan_${{ parameters.name }}_infra
    displayName: Plan ${{ parameters.name }} infra
    dependsOn: ci
    pool:
      vmImage: ubuntu-latest
    variables:
      - group: ${{ parameters.variable_group }}
    jobs:
      - deployment: terraform
        displayName: Terraform
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: infra-env
                  displayName: Download infra-env artifact
                - template: create-backend-tf-file-step.yml
                  parameters:
                    key: terraform.$(environment).tfstate
                    working_directory: $(Pipeline.Workspace)/infra-env
                - script: |
                    cat << EOF >> ./terraform.tfvars
                    acr_resource_group_name = "$(acr_resource_group_name)"
                    acr_name                = "$(acr_name)"
                    environment             = "$(environment)"
                    name                    = "$(name)"
                    suffix                  = "$(suffix)"
                    db_name                 = "$(app_db_name)"
                    db_login                = "$(app_db_login)"
                    db_password             = "$(app_db_password)"
                    EOF
                  displayName: Create terraform.tfvars file
                  workingDirectory: $(Pipeline.Workspace)/infra-env
                - template: install-terraform-step.yml
                - script: |
                    terraform init && terraform plan
                  displayName: Terraform plan
                  workingDirectory: $(Pipeline.Workspace)/infra-env
                  env:
                    ARM_CLIENT_ID: $(tf_client_id)
                    ARM_CLIENT_SECRET: $(tf_client_secret)
                    ARM_SUBSCRIPTION_ID: $(tf_subscription_id)
                    ARM_TENANT_ID: $(tf_tenant_id)

  # STAGE: Deploy infra
  - stage: deploy_${{ parameters.name }}_infra
    displayName: Deploy ${{ parameters.name }} infra
    dependsOn: plan_${{ parameters.name }}_infra
    pool:
      vmImage: ubuntu-latest
    variables:
      - group: ${{ parameters.variable_group }}
    jobs:
      - deployment: terraform
        displayName: Terraform
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: infra-env
                  displayName: Download infra-env artifact
                - template: create-backend-tf-file-step.yml
                  parameters:
                    key: terraform.$(environment).tfstate
                    working_directory: $(Pipeline.Workspace)/infra-env
                - script: |
                    cat << EOF >> ./terraform.tfvars
                    acr_resource_group_name = "$(acr_resource_group_name)"
                    acr_name                = "$(acr_name)"
                    environment             = "$(environment)"
                    name                    = "$(name)"
                    suffix                  = "$(suffix)"
                    db_name                 = "$(app_db_name)"
                    db_login                = "$(app_db_login)"
                    db_password             = "$(app_db_password)"
                    EOF
                  displayName: Create terraform.tfvars file
                  workingDirectory: $(Pipeline.Workspace)/infra-env
                - template: install-terraform-step.yml
                - script: |
                    terraform init && terraform apply -auto-approve
                  displayName: Terraform apply
                  workingDirectory: $(Pipeline.Workspace)/infra-env
                  env:
                    ARM_CLIENT_ID: $(tf_client_id)
                    ARM_CLIENT_SECRET: $(tf_client_secret)
                    ARM_SUBSCRIPTION_ID: $(tf_subscription_id)
                    ARM_TENANT_ID: $(tf_tenant_id)

  # STAGE: Deploy
  - stage: deploy_${{ parameters.name }}
    displayName: Deploy ${{ parameters.name }}
    dependsOn: deploy_${{ parameters.name }}_infra
    pool:
      vmImage: ubuntu-latest
    variables:
      - group: ${{ parameters.variable_group }}
    jobs:
      - deployment: database
        displayName: Database
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: db-migrations
                  displayName: Download db-migrations artifact
                - template: flyway-step.yml
                  parameters:
                    command: info
                - template: flyway-step.yml
                  parameters:
                    command: migrate
      - deployment: application
        displayName: Application
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: Deploy
                  inputs:
                    appName: $(app_name)
                    azureSubscription: $(service_connection_arm)
                    imageName: $(imageName)
                    appSettings: |
                      -APP_NAME $(app_name) 
                      -APP_ADDRESS $(app_address) 
                      -APP_API_KEY $(app_api_key) 
                      -APP_API_KEY_HEADER $(app_api_key_header) 
                      -APP_DB_CONNECTION_STRING $(app_db_connection_string) 
                      -APP_CORS_ENABLED $(app_cors_enabled) 
                      -APP_LOG_LEVEL $(app_log_level) 
                      -APP_REQUEST_TIMEOUT $(app_request_timeout)
